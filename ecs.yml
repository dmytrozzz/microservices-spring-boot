Resources:
  EcsVpcCEF3634B:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: ecs/EcsVpc
  EcsVpcPublicSubnet1Subnet4FC26CFD:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.0.0/18
      VpcId:
        Ref: EcsVpcCEF3634B
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ""
      MapPublicIpOnLaunch: true
      Tags:
        - Key: aws-cdk:subnet-name
          Value: Public
        - Key: aws-cdk:subnet-type
          Value: Public
        - Key: Name
          Value: ecs/EcsVpc/PublicSubnet1
  EcsVpcPublicSubnet1RouteTable3F836709:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: EcsVpcCEF3634B
      Tags:
        - Key: Name
          Value: ecs/EcsVpc/PublicSubnet1
  EcsVpcPublicSubnet1RouteTableAssociation27B0B1F1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: EcsVpcPublicSubnet1RouteTable3F836709
      SubnetId:
        Ref: EcsVpcPublicSubnet1Subnet4FC26CFD
  EcsVpcPublicSubnet1DefaultRoute29B4D851:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: EcsVpcPublicSubnet1RouteTable3F836709
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: EcsVpcIGWF80402C4
    DependsOn:
      - EcsVpcVPCGWE2526015
  EcsVpcPublicSubnet1EIP97CC60E8:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: ecs/EcsVpc/PublicSubnet1
  EcsVpcPublicSubnet1NATGateway84F4640B:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId:
        Fn::GetAtt:
          - EcsVpcPublicSubnet1EIP97CC60E8
          - AllocationId
      SubnetId:
        Ref: EcsVpcPublicSubnet1Subnet4FC26CFD
      Tags:
        - Key: Name
          Value: ecs/EcsVpc/PublicSubnet1
  EcsVpcPublicSubnet2Subnet127B1F4A:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.64.0/18
      VpcId:
        Ref: EcsVpcCEF3634B
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: ""
      MapPublicIpOnLaunch: true
      Tags:
        - Key: aws-cdk:subnet-name
          Value: Public
        - Key: aws-cdk:subnet-type
          Value: Public
        - Key: Name
          Value: ecs/EcsVpc/PublicSubnet2
  EcsVpcPublicSubnet2RouteTable259A8B2D:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: EcsVpcCEF3634B
      Tags:
        - Key: Name
          Value: ecs/EcsVpc/PublicSubnet2
  EcsVpcPublicSubnet2RouteTableAssociation6449DB9B:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: EcsVpcPublicSubnet2RouteTable259A8B2D
      SubnetId:
        Ref: EcsVpcPublicSubnet2Subnet127B1F4A
  EcsVpcPublicSubnet2DefaultRouteD785541D:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: EcsVpcPublicSubnet2RouteTable259A8B2D
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: EcsVpcIGWF80402C4
    DependsOn:
      - EcsVpcVPCGWE2526015
  EcsVpcPublicSubnet2EIP9B6C83AE:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: ecs/EcsVpc/PublicSubnet2
  EcsVpcPublicSubnet2NATGatewayDFAD96D0:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId:
        Fn::GetAtt:
          - EcsVpcPublicSubnet2EIP9B6C83AE
          - AllocationId
      SubnetId:
        Ref: EcsVpcPublicSubnet2Subnet127B1F4A
      Tags:
        - Key: Name
          Value: ecs/EcsVpc/PublicSubnet2
  EcsVpcPrivateSubnet1SubnetDE1C6717:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.128.0/18
      VpcId:
        Ref: EcsVpcCEF3634B
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ""
      MapPublicIpOnLaunch: false
      Tags:
        - Key: aws-cdk:subnet-name
          Value: Private
        - Key: aws-cdk:subnet-type
          Value: Private
        - Key: Name
          Value: ecs/EcsVpc/PrivateSubnet1
  EcsVpcPrivateSubnet1RouteTable44D603B2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: EcsVpcCEF3634B
      Tags:
        - Key: Name
          Value: ecs/EcsVpc/PrivateSubnet1
  EcsVpcPrivateSubnet1RouteTableAssociationA072EBC4:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: EcsVpcPrivateSubnet1RouteTable44D603B2
      SubnetId:
        Ref: EcsVpcPrivateSubnet1SubnetDE1C6717
  EcsVpcPrivateSubnet1DefaultRoute523B7F1A:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: EcsVpcPrivateSubnet1RouteTable44D603B2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: EcsVpcPublicSubnet1NATGateway84F4640B
  EcsVpcPrivateSubnet2Subnet4E5EDAB1:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.192.0/18
      VpcId:
        Ref: EcsVpcCEF3634B
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: ""
      MapPublicIpOnLaunch: false
      Tags:
        - Key: aws-cdk:subnet-name
          Value: Private
        - Key: aws-cdk:subnet-type
          Value: Private
        - Key: Name
          Value: ecs/EcsVpc/PrivateSubnet2
  EcsVpcPrivateSubnet2RouteTable1CB3B77F:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: EcsVpcCEF3634B
      Tags:
        - Key: Name
          Value: ecs/EcsVpc/PrivateSubnet2
  EcsVpcPrivateSubnet2RouteTableAssociation136FEFD9:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: EcsVpcPrivateSubnet2RouteTable1CB3B77F
      SubnetId:
        Ref: EcsVpcPrivateSubnet2Subnet4E5EDAB1
  EcsVpcPrivateSubnet2DefaultRoute1D92C4ED:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: EcsVpcPrivateSubnet2RouteTable1CB3B77F
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: EcsVpcPublicSubnet2NATGatewayDFAD96D0
  EcsVpcIGWF80402C4:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: ecs/EcsVpc
  EcsVpcVPCGWE2526015:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:
        Ref: EcsVpcCEF3634B
      InternetGatewayId:
        Ref: EcsVpcIGWF80402C4
  EcsSecGroup447E2DD7:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ECS default group
      GroupName: EcsSecurity
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic by default
          IpProtocol: "-1"
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          Description: from 0.0.0.0/0:ALL TRAFFIC
          IpProtocol: "-1"
        - CidrIp: 0.0.0.0/0
          Description: Allow from anyone on port 80
          FromPort: 80
          IpProtocol: tcp
          ToPort: 80
      VpcId:
        Ref: EcsVpcCEF3634B
  DataBaseSubnetGroupA5209165:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Subnet group for DataBase database
      SubnetIds:
        - Ref: EcsVpcPrivateSubnet1SubnetDE1C6717
        - Ref: EcsVpcPrivateSubnet2Subnet4E5EDAB1
  DataBaseSecurityGroup7D0B018A:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for DataBase database
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic by default
          IpProtocol: "-1"
      VpcId:
        Ref: EcsVpcCEF3634B
  DataBaseSecurityGroupfrom00000IndirectPort10B64BD1:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      CidrIp: 0.0.0.0/0
      Description: from 0.0.0.0/0:{IndirectPort}
      FromPort:
        Fn::GetAtt:
          - DataBase7FAEC8C1
          - Endpoint.Port
      GroupId:
        Fn::GetAtt:
          - DataBaseSecurityGroup7D0B018A
          - GroupId
      ToPort:
        Fn::GetAtt:
          - DataBase7FAEC8C1
          - Endpoint.Port
  DataBase7FAEC8C1:
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceClass: db.m3.medium
      AllocatedStorage: "100"
      CopyTagsToSnapshot: true
      DBSubnetGroupName:
        Ref: DataBaseSubnetGroupA5209165
      Engine: mysql
      EngineVersion: 5.7.31
      MasterUsername: root
      MasterUserPassword: admin123!
      PubliclyAccessible: false
      StorageType: gp2
      VPCSecurityGroups:
        - Fn::GetAtt:
            - DataBaseSecurityGroup7D0B018A
            - GroupId
    UpdateReplacePolicy: Snapshot
  EcsCluster97242B84:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: spring-boot-micro-cluster
  vpcsgidfrom00000800C319386:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      CidrIp: 0.0.0.0/0
      Description: Allow from anyone on port 80
      FromPort: 80
      GroupId:
        Fn::GetAtt:
          - EcsVpcCEF3634B
          - DefaultSecurityGroup
      ToPort: 80
  EcsAlb6ACDFD7B:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      LoadBalancerAttributes:
        - Key: deletion_protection.enabled
          Value: "false"
      Name: EcsAlb
      Scheme: internet-facing
      SecurityGroups:
        - Fn::GetAtt:
            - EcsVpcCEF3634B
            - DefaultSecurityGroup
        - Fn::GetAtt:
            - EcsSecGroup447E2DD7
            - GroupId
      Subnets:
        - Ref: EcsVpcPublicSubnet1Subnet4FC26CFD
        - Ref: EcsVpcPublicSubnet2Subnet127B1F4A
      Type: application
    DependsOn:
      - EcsVpcPublicSubnet1DefaultRoute29B4D851
      - EcsVpcPublicSubnet2DefaultRouteD785541D
  springeurekazuulsecurityGroupA357B4DB:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ecs/spring-eureka-zuul-securityGroup
      GroupName: spring-eureka-zuul-securityGroup
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic by default
          IpProtocol: "-1"
      VpcId:
        Ref: EcsVpcCEF3634B
  springeurekazuulsecurityGroupfromecsvpcsgid08F1410787626E3518BD:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      Description: Load balancer to target
      FromPort: 8762
      GroupId:
        Fn::GetAtt:
          - springeurekazuulsecurityGroupA357B4DB
          - GroupId
      SourceSecurityGroupId:
        Fn::GetAtt:
          - EcsVpcCEF3634B
          - DefaultSecurityGroup
      ToPort: 8762
  springeurekazuulsecurityGroupfromecsEcsSecGroup4A245FB8876267B0B67B:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      Description: Load balancer to target
      FromPort: 8762
      GroupId:
        Fn::GetAtt:
          - springeurekazuulsecurityGroupA357B4DB
          - GroupId
      SourceSecurityGroupId:
        Fn::GetAtt:
          - EcsSecGroup447E2DD7
          - GroupId
      ToPort: 8762
  springeurekaserversecurityGroupE784A2DE:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ecs/spring-eureka-server-securityGroup
      GroupName: spring-eureka-server-securityGroup
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic by default
          IpProtocol: "-1"
      VpcId:
        Ref: EcsVpcCEF3634B
  springeurekaserversecurityGroupfromecsspringeurekazuulsecurityGroup858CD6A88761F79BB7BC:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      Description: from ecsspringeurekazuulsecurityGroup858CD6A8:8761
      FromPort: 8761
      GroupId:
        Fn::GetAtt:
          - springeurekaserversecurityGroupE784A2DE
          - GroupId
      SourceSecurityGroupId:
        Fn::GetAtt:
          - springeurekazuulsecurityGroupA357B4DB
          - GroupId
      ToPort: 8761
  springeurekaserversecurityGroupfromecsvpcsgid08F14107876196491F07:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      Description: Load balancer to target
      FromPort: 8761
      GroupId:
        Fn::GetAtt:
          - springeurekaserversecurityGroupE784A2DE
          - GroupId
      SourceSecurityGroupId:
        Fn::GetAtt:
          - EcsVpcCEF3634B
          - DefaultSecurityGroup
      ToPort: 8761
  springeurekaserversecurityGroupfromecsEcsSecGroup4A245FB88761D2666D77:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      Description: Load balancer to target
      FromPort: 8761
      GroupId:
        Fn::GetAtt:
          - springeurekaserversecurityGroupE784A2DE
          - GroupId
      SourceSecurityGroupId:
        Fn::GetAtt:
          - EcsSecGroup447E2DD7
          - GroupId
      ToPort: 8761
  springeurekagallerysecurityGroupF217F74F:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ecs/spring-eureka-gallery-securityGroup
      GroupName: spring-eureka-gallery-securityGroup
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic by default
          IpProtocol: "-1"
      VpcId:
        Ref: EcsVpcCEF3634B
  springeurekagallerysecurityGroupfromecsspringeurekazuulsecurityGroup858CD6A8810098996ACA:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      Description: from ecsspringeurekazuulsecurityGroup858CD6A8:8100
      FromPort: 8100
      GroupId:
        Fn::GetAtt:
          - springeurekagallerysecurityGroupF217F74F
          - GroupId
      SourceSecurityGroupId:
        Fn::GetAtt:
          - springeurekazuulsecurityGroupA357B4DB
          - GroupId
      ToPort: 8100
  springeurekaauthsecurityGroup010C1332:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ecs/spring-eureka-auth-securityGroup
      GroupName: spring-eureka-auth-securityGroup
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic by default
          IpProtocol: "-1"
      VpcId:
        Ref: EcsVpcCEF3634B
  springeurekaauthsecurityGroupfromecsspringeurekazuulsecurityGroup858CD6A89100CD3C898D:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      Description: from ecsspringeurekazuulsecurityGroup858CD6A8:9100
      FromPort: 9100
      GroupId:
        Fn::GetAtt:
          - springeurekaauthsecurityGroup010C1332
          - GroupId
      SourceSecurityGroupId:
        Fn::GetAtt:
          - springeurekazuulsecurityGroupA357B4DB
          - GroupId
      ToPort: 9100
  springeurekazuulTaskRoleBE356513:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
        Version: "2012-10-17"
  springeurekazuulE901549A:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
        - Cpu: 256
          Environment:
            - Name: EUREKA_HOST
              Value:
                Fn::GetAtt:
                  - EcsAlb6ACDFD7B
                  - DNSName
            - Name: SPRING_PROFILES_ACTIVE
              Value: fargate
          Essential: true
          Image:
            Fn::Join:
              - ""
              - - Fn::Select:
                    - 4
                    - Fn::Split:
                        - ":"
                        - Fn::ImportValue: spring-eureka-zuul-arn
                - .dkr.ecr.
                - Fn::Select:
                    - 3
                    - Fn::Split:
                        - ":"
                        - Fn::ImportValue: spring-eureka-zuul-arn
                - "."
                - Ref: AWS::URLSuffix
                - /spring-eureka-zuul:latest
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group:
                Ref: springeurekazuulspringeurekazuulcontainerLogGroup0FCB805B
              awslogs-stream-prefix: spring-eureka-zuul-micrologs
              awslogs-region:
                Ref: AWS::Region
          Memory: 512
          Name: spring-eureka-zuul-container
          PortMappings:
            - ContainerPort: 8762
              Protocol: tcp
      Cpu: "256"
      ExecutionRoleArn:
        Fn::GetAtt:
          - springeurekazuulExecutionRoleAB0DB027
          - Arn
      Family: spring-eureka-zuul
      Memory: "512"
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      TaskRoleArn:
        Fn::GetAtt:
          - springeurekazuulTaskRoleBE356513
          - Arn
  springeurekazuulspringeurekazuulcontainerLogGroup0FCB805B:
    Type: AWS::Logs::LogGroup
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
  springeurekazuulExecutionRoleAB0DB027:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
        Version: "2012-10-17"
  springeurekazuulExecutionRoleDefaultPolicy96D7966C:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - ecr:BatchCheckLayerAvailability
              - ecr:GetDownloadUrlForLayer
              - ecr:BatchGetImage
            Effect: Allow
            Resource:
              Fn::ImportValue: spring-eureka-zuul-arn
          - Action: ecr:GetAuthorizationToken
            Effect: Allow
            Resource: "*"
          - Action:
              - logs:CreateLogStream
              - logs:PutLogEvents
            Effect: Allow
            Resource:
              Fn::GetAtt:
                - springeurekazuulspringeurekazuulcontainerLogGroup0FCB805B
                - Arn
        Version: "2012-10-17"
      PolicyName: springeurekazuulExecutionRoleDefaultPolicy96D7966C
      Roles:
        - Ref: springeurekazuulExecutionRoleAB0DB027
  springeurekazuulserviceService2506F635:
    Type: AWS::ECS::Service
    Properties:
      Cluster:
        Ref: EcsCluster97242B84
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 50
      DesiredCount: 1
      EnableECSManagedTags: false
      HealthCheckGracePeriodSeconds: 60
      LaunchType: FARGATE
      LoadBalancers:
        - ContainerName: spring-eureka-zuul-container
          ContainerPort: 8762
          TargetGroupArn:
            Ref: microzuultgB7130E03
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
            - Fn::GetAtt:
                - springeurekazuulsecurityGroupA357B4DB
                - GroupId
          Subnets:
            - Ref: EcsVpcPrivateSubnet1SubnetDE1C6717
            - Ref: EcsVpcPrivateSubnet2Subnet4E5EDAB1
      PlatformVersion: 1.4.0
      ServiceName: spring-eureka-zuul
      TaskDefinition:
        Ref: springeurekazuulE901549A
    DependsOn:
      - zuulruleA0C86F44
  springeurekaserverTaskRole4922B4EB:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
        Version: "2012-10-17"
  springeurekaserver8D1EE44B:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
        - Cpu: 256
          Environment:
            - Name: EUREKA_HOST
              Value:
                Fn::GetAtt:
                  - EcsAlb6ACDFD7B
                  - DNSName
            - Name: SPRING_PROFILES_ACTIVE
              Value: fargate
          Essential: true
          Image:
            Fn::Join:
              - ""
              - - Fn::Select:
                    - 4
                    - Fn::Split:
                        - ":"
                        - Fn::ImportValue: spring-eureka-server-arn
                - .dkr.ecr.
                - Fn::Select:
                    - 3
                    - Fn::Split:
                        - ":"
                        - Fn::ImportValue: spring-eureka-server-arn
                - "."
                - Ref: AWS::URLSuffix
                - /spring-eureka-server:latest
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group:
                Ref: springeurekaserverspringeurekaservercontainerLogGroup8BAE2BFE
              awslogs-stream-prefix: spring-eureka-server-micrologs
              awslogs-region:
                Ref: AWS::Region
          Memory: 512
          Name: spring-eureka-server-container
          PortMappings:
            - ContainerPort: 8761
              Protocol: tcp
      Cpu: "256"
      ExecutionRoleArn:
        Fn::GetAtt:
          - springeurekaserverExecutionRoleEFE80ABD
          - Arn
      Family: spring-eureka-server
      Memory: "512"
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      TaskRoleArn:
        Fn::GetAtt:
          - springeurekaserverTaskRole4922B4EB
          - Arn
  springeurekaserverspringeurekaservercontainerLogGroup8BAE2BFE:
    Type: AWS::Logs::LogGroup
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
  springeurekaserverExecutionRoleEFE80ABD:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
        Version: "2012-10-17"
  springeurekaserverExecutionRoleDefaultPolicyB36A8DEE:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - ecr:BatchCheckLayerAvailability
              - ecr:GetDownloadUrlForLayer
              - ecr:BatchGetImage
            Effect: Allow
            Resource:
              Fn::ImportValue: spring-eureka-server-arn
          - Action: ecr:GetAuthorizationToken
            Effect: Allow
            Resource: "*"
          - Action:
              - logs:CreateLogStream
              - logs:PutLogEvents
            Effect: Allow
            Resource:
              Fn::GetAtt:
                - springeurekaserverspringeurekaservercontainerLogGroup8BAE2BFE
                - Arn
        Version: "2012-10-17"
      PolicyName: springeurekaserverExecutionRoleDefaultPolicyB36A8DEE
      Roles:
        - Ref: springeurekaserverExecutionRoleEFE80ABD
  springeurekaserverserviceServiceE69BB374:
    Type: AWS::ECS::Service
    Properties:
      Cluster:
        Ref: EcsCluster97242B84
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 50
      DesiredCount: 1
      EnableECSManagedTags: false
      HealthCheckGracePeriodSeconds: 60
      LaunchType: FARGATE
      LoadBalancers:
        - ContainerName: spring-eureka-server-container
          ContainerPort: 8761
          TargetGroupArn:
            Ref: microeurekatg037113BA
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
            - Fn::GetAtt:
                - springeurekaserversecurityGroupE784A2DE
                - GroupId
          Subnets:
            - Ref: EcsVpcPrivateSubnet1SubnetDE1C6717
            - Ref: EcsVpcPrivateSubnet2Subnet4E5EDAB1
      PlatformVersion: 1.4.0
      ServiceName: spring-eureka-server
      TaskDefinition:
        Ref: springeurekaserver8D1EE44B
    DependsOn:
      - eurekarule03A7B175
  springeurekagalleryTaskRoleF10CD53D:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
        Version: "2012-10-17"
  springeurekagallery9135F3DD:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
        - Cpu: 256
          Environment:
            - Name: EUREKA_HOST
              Value:
                Fn::GetAtt:
                  - EcsAlb6ACDFD7B
                  - DNSName
            - Name: SPRING_PROFILES_ACTIVE
              Value: fargate
          Essential: true
          Image:
            Fn::Join:
              - ""
              - - Fn::Select:
                    - 4
                    - Fn::Split:
                        - ":"
                        - Fn::ImportValue: spring-eureka-gallery-arn
                - .dkr.ecr.
                - Fn::Select:
                    - 3
                    - Fn::Split:
                        - ":"
                        - Fn::ImportValue: spring-eureka-gallery-arn
                - "."
                - Ref: AWS::URLSuffix
                - /spring-eureka-gallery:latest
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group:
                Ref: springeurekagalleryspringeurekagallerycontainerLogGroupC4ADAD48
              awslogs-stream-prefix: spring-eureka-gallery-micrologs
              awslogs-region:
                Ref: AWS::Region
          Memory: 512
          Name: spring-eureka-gallery-container
          PortMappings:
            - ContainerPort: 8100
              Protocol: tcp
      Cpu: "256"
      ExecutionRoleArn:
        Fn::GetAtt:
          - springeurekagalleryExecutionRoleD3D42DA0
          - Arn
      Family: spring-eureka-gallery
      Memory: "512"
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      TaskRoleArn:
        Fn::GetAtt:
          - springeurekagalleryTaskRoleF10CD53D
          - Arn
  springeurekagalleryspringeurekagallerycontainerLogGroupC4ADAD48:
    Type: AWS::Logs::LogGroup
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
  springeurekagalleryExecutionRoleD3D42DA0:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
        Version: "2012-10-17"
  springeurekagalleryExecutionRoleDefaultPolicy23D82398:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - ecr:BatchCheckLayerAvailability
              - ecr:GetDownloadUrlForLayer
              - ecr:BatchGetImage
            Effect: Allow
            Resource:
              Fn::ImportValue: spring-eureka-gallery-arn
          - Action: ecr:GetAuthorizationToken
            Effect: Allow
            Resource: "*"
          - Action:
              - logs:CreateLogStream
              - logs:PutLogEvents
            Effect: Allow
            Resource:
              Fn::GetAtt:
                - springeurekagalleryspringeurekagallerycontainerLogGroupC4ADAD48
                - Arn
        Version: "2012-10-17"
      PolicyName: springeurekagalleryExecutionRoleDefaultPolicy23D82398
      Roles:
        - Ref: springeurekagalleryExecutionRoleD3D42DA0
  springeurekagalleryserviceService43ABB71F:
    Type: AWS::ECS::Service
    Properties:
      Cluster:
        Ref: EcsCluster97242B84
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 50
      DesiredCount: 1
      EnableECSManagedTags: false
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
            - Fn::GetAtt:
                - springeurekagallerysecurityGroupF217F74F
                - GroupId
          Subnets:
            - Ref: EcsVpcPrivateSubnet1SubnetDE1C6717
            - Ref: EcsVpcPrivateSubnet2Subnet4E5EDAB1
      PlatformVersion: 1.4.0
      ServiceName: spring-eureka-gallery
      TaskDefinition:
        Ref: springeurekagallery9135F3DD
  springeurekaauthTaskRole41CB04DC:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
        Version: "2012-10-17"
  springeurekaauth5EC851FA:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
        - Cpu: 256
          Environment:
            - Name: EUREKA_HOST
              Value:
                Fn::GetAtt:
                  - EcsAlb6ACDFD7B
                  - DNSName
            - Name: SPRING_PROFILES_ACTIVE
              Value: fargate
          Essential: true
          Image:
            Fn::Join:
              - ""
              - - Fn::Select:
                    - 4
                    - Fn::Split:
                        - ":"
                        - Fn::ImportValue: spring-eureka-auth-arn
                - .dkr.ecr.
                - Fn::Select:
                    - 3
                    - Fn::Split:
                        - ":"
                        - Fn::ImportValue: spring-eureka-auth-arn
                - "."
                - Ref: AWS::URLSuffix
                - /spring-eureka-auth:latest
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group:
                Ref: springeurekaauthspringeurekaauthcontainerLogGroupFCEE70B3
              awslogs-stream-prefix: spring-eureka-auth-micrologs
              awslogs-region:
                Ref: AWS::Region
          Memory: 512
          Name: spring-eureka-auth-container
          PortMappings:
            - ContainerPort: 9100
              Protocol: tcp
      Cpu: "256"
      ExecutionRoleArn:
        Fn::GetAtt:
          - springeurekaauthExecutionRole5C041318
          - Arn
      Family: spring-eureka-auth
      Memory: "512"
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      TaskRoleArn:
        Fn::GetAtt:
          - springeurekaauthTaskRole41CB04DC
          - Arn
  springeurekaauthspringeurekaauthcontainerLogGroupFCEE70B3:
    Type: AWS::Logs::LogGroup
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
  springeurekaauthExecutionRole5C041318:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
        Version: "2012-10-17"
  springeurekaauthExecutionRoleDefaultPolicyFFD983A7:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - ecr:BatchCheckLayerAvailability
              - ecr:GetDownloadUrlForLayer
              - ecr:BatchGetImage
            Effect: Allow
            Resource:
              Fn::ImportValue: spring-eureka-auth-arn
          - Action: ecr:GetAuthorizationToken
            Effect: Allow
            Resource: "*"
          - Action:
              - logs:CreateLogStream
              - logs:PutLogEvents
            Effect: Allow
            Resource:
              Fn::GetAtt:
                - springeurekaauthspringeurekaauthcontainerLogGroupFCEE70B3
                - Arn
        Version: "2012-10-17"
      PolicyName: springeurekaauthExecutionRoleDefaultPolicyFFD983A7
      Roles:
        - Ref: springeurekaauthExecutionRole5C041318
  springeurekaauthserviceService5CF18494:
    Type: AWS::ECS::Service
    Properties:
      Cluster:
        Ref: EcsCluster97242B84
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 50
      DesiredCount: 1
      EnableECSManagedTags: false
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
            - Fn::GetAtt:
                - springeurekaauthsecurityGroup010C1332
                - GroupId
          Subnets:
            - Ref: EcsVpcPrivateSubnet1SubnetDE1C6717
            - Ref: EcsVpcPrivateSubnet2Subnet4E5EDAB1
      PlatformVersion: 1.4.0
      ServiceName: spring-eureka-auth
      TaskDefinition:
        Ref: springeurekaauth5EC851FA
  EcsAlbListener501237C7:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - FixedResponseConfig:
            StatusCode: "200"
          Type: fixed-response
      LoadBalancerArn:
        Ref: EcsAlb6ACDFD7B
      Port: 80
      Protocol: HTTP
  microeurekatg037113BA:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckEnabled: true
      HealthCheckIntervalSeconds: 300
      HealthCheckTimeoutSeconds: 60
      Matcher:
        HttpCode: 200-499
      Port: 80
      Protocol: HTTP
      Tags:
        - Key: Name
          Value: eureka-alb-target
      TargetType: ip
      UnhealthyThresholdCount: 10
      VpcId:
        Ref: EcsVpcCEF3634B
  eurekarule03A7B175:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - TargetGroupArn:
            Ref: microeurekatg037113BA
          Type: forward
      Conditions:
        - Field: path-pattern
          PathPatternConfig:
            Values:
              - /eurekaui
              - /eurekaui/*
              - /eureka
              - /eureka/*
      ListenerArn:
        Ref: EcsAlbListener501237C7
      Priority: 2
  microzuultgB7130E03:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckEnabled: true
      HealthCheckIntervalSeconds: 300
      HealthCheckTimeoutSeconds: 60
      Matcher:
        HttpCode: 200-499
      Port: 80
      Protocol: HTTP
      Tags:
        - Key: Name
          Value: zuul-alb-target
      TargetType: ip
      UnhealthyThresholdCount: 10
      VpcId:
        Ref: EcsVpcCEF3634B
  zuulruleA0C86F44:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - TargetGroupArn:
            Ref: microzuultgB7130E03
          Type: forward
      Conditions:
        - Field: path-pattern
          PathPatternConfig:
            Values:
              - /*
      ListenerArn:
        Ref: EcsAlbListener501237C7
      Priority: 3
Outputs:
  dbCnnection:
    Value:
      Fn::GetAtt:
        - DataBase7FAEC8C1
        - Endpoint.Address
    Export:
      Name: dbConnection
  ALBUri:
    Value:
      Fn::GetAtt:
        - EcsAlb6ACDFD7B
        - DNSName
    Export:
      Name: alb-uri

